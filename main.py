import telebot
import json
import logging
import schedule
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz
from telebot import types

# ==================== –¢–ê–ù–ó–ò–ú–û–¢ (–ö–û–ù–§–ò–ì–£–†–ê–¢–°–ò–Ø) ====================
BOT_TOKEN = "7757855093:AAHnKu13QdJB3RUfT_pNZ6HFzsBxD4ATzDI"  # Token-–∏ –±–æ—Ç–∞—Ç–æ–Ω—Ä–æ –¥–∞—Ä –∏–Ω “∑–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥
ADMIN_USER_ID = 6862331593  # ID-–∏ Telegram-–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º)
CHANNEL_ID = "@kinohoijazob"  # ID-–∏ –∫–∞–Ω–∞–ª —ë username (–º–∞—Å–∞–ª–∞–Ω @mychannel —ë -100xxxxxxxxxx)
DATA_FILE = "bot_data.json"  # –ù–æ–º–∏ —Ñ–∞–π–ª–∏ JSON –±–∞—Ä–æ–∏ –∑–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
MAX_QUEUE_SIZE = 10  # –®—É–º–æ—Ä–∞–∏ –º–∞–∫—Å–∏–º–∞–ª–∏–∏ —Ñ–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç
DEFAULT_POST_TIME = "10:00"  # –í–∞“õ—Ç–∏ –ø–µ—à—Ñ–∞—Ä–∑ –±–∞—Ä–æ–∏ –∏–Ω—Ç–∏—à–æ—Ä

# –í–∞“õ—Ç–∏ –º–∏–Ω—Ç–∞“õ–∞–≤–∏–∏ –¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω
TAJIKISTAN_TZ = pytz.timezone('Asia/Dushanbe')

# ==================== –¢–ê–ù–ó–ò–ú–ò LOGGING ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ò–ù–ò–¢–°–ò–ê–õ–ò–ó–ê–¢–°–ò–Ø–ò –ë–û–¢ ====================
bot = telebot.TeleBot(BOT_TOKEN)

# ==================== –°–¢–†–£–ö–¢–£–†–ê–ò –ú–ê–™–õ–£–ú–û–¢ ====================
class BotData:
    def __init__(self):
        self.movie_queue: List[Dict] = []  # –ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ
        self.post_time: str = DEFAULT_POST_TIME  # –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä
        self.last_post_date: str = ""  # –¢–∞—ä—Ä–∏—Ö–∏ –æ—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä
    
    def to_dict(self) -> Dict:
        """–¢–∞–±–¥–∏–ª –¥–æ–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞ dict –±–∞—Ä–æ–∏ JSON"""
        return {
            'movie_queue': self.movie_queue,
            'post_time': self.post_time,
            'last_post_date': self.last_post_date
        }
    
    def from_dict(self, data: Dict):
        """–ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –∞–∑ dict"""
        self.movie_queue = data.get('movie_queue', [])
        self.post_time = data.get('post_time', DEFAULT_POST_TIME)
        self.last_post_date = data.get('last_post_date', "")

# ==================== –ì–õ–û–ë–ê–õ–ò–ò –ú–ê–™–õ–£–ú–û–¢ ====================
bot_data = BotData()

# ==================== –§–£–ù–ö–°–ò–Ø“≤–û–ò –ö–£–ú–ê–ö”¢ ====================
def get_tajikistan_time() -> datetime:
    """–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –≤–∞“õ—Ç–∏ –∫—É–Ω—É–Ω–∏–∏ –¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω"""
    return datetime.now(TAJIKISTAN_TZ)

def save_data():
    """–ó–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞ —Ñ–∞–π–ª–∏ JSON"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(bot_data.to_dict(), f, ensure_ascii=False, indent=2)
        logger.info("–ú–∞—ä–ª—É–º–æ—Ç –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∑–∞—Ö–∏—Ä–∞ —à—É–¥")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∑–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç: {e}")

def load_data():
    """–ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –∞–∑ —Ñ–∞–π–ª–∏ JSON"""
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        bot_data.from_dict(data)
        logger.info("–ú–∞—ä–ª—É–º–æ—Ç –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª–∏ –º–∞—ä–ª—É–º–æ—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥, –º–∞—ä–ª—É–º–æ—Ç–∏ –Ω–∞–≤ —ç“∑–æ–¥ –º–µ—à–∞–≤–∞–¥")
        save_data()
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –±–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç: {e}")

def is_admin(user_id: int) -> bool:
    """–°–∞–Ω“∑–∏—à–∏ “≥—É“õ—É“õ–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
    return user_id == ADMIN_USER_ID

def get_next_post_time() -> tuple:
    """–ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –≤–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£ –≤–∞ –≤–∞“õ—Ç–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞"""
    try:
        now = get_tajikistan_time()
        post_hour, post_minute = map(int, bot_data.post_time.split(':'))
        
        # –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞—ä—Ä–∏—Ö–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£
        next_post = now.replace(hour=post_hour, minute=post_minute, second=0, microsecond=0)
        
        # –ê–≥–∞—Ä –≤–∞“õ—Ç –≥—É–∑–∞—à—Ç–∞ –±–æ—à–∞–¥, –±–∞—Ä–æ–∏ —Ñ–∞—Ä–¥–æ –º—É–∞–π—è–Ω –º–µ–∫—É–Ω–µ–º
        if next_post <= now:
            next_post += timedelta(days=1)
        
        # “≤–∏—Å–æ–± –∫–∞—Ä–¥–∞–Ω–∏ –≤–∞“õ—Ç–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞
        time_remaining = next_post - now
        
        # –¢–∞–±–¥–∏–ª –±–∞ –¥–∞“õ–∏“õ–∞“≥–æ
        minutes_remaining = int(time_remaining.total_seconds() // 60)
        hours_remaining = minutes_remaining // 60
        minutes_remaining = minutes_remaining % 60
        
        time_str = ""
        if hours_remaining > 0:
            time_str = f"{hours_remaining} —Å–æ–∞—Ç {minutes_remaining} –¥–∞“õ–∏“õ–∞"
        else:
            time_str = f"{minutes_remaining} –¥–∞“õ–∏“õ–∞"
        
        return next_post.strftime("%Y-%m-%d %H:%M"), time_str
        
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ “≥–∏—Å–æ–±–∏ –≤–∞“õ—Ç–∏ –Ω–∞–≤–±–∞—Ç”£: {e}")
        return "–ù–æ–º—É–∞–π—è–Ω", "–ù–æ–º—É–∞–π—è–Ω"

def create_main_keyboard():
    """–≠“∑–æ–¥–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∞—Å–æ—Å”£"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –°–∞—Ñ–∏ —è–∫—É–º - –º–∞—ä–ª—É–º–æ—Ç–∏ –∞—Å–æ—Å”£
    status_btn = types.InlineKeyboardButton("üìä –í–∞–∑—ä–∏—è—Ç", callback_data="status")
    queue_btn = types.InlineKeyboardButton("üìù –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ", callback_data="listmovies")
    keyboard.row(status_btn, queue_btn)
    
    # –°–∞—Ñ–∏ –¥—É—é–º - –∏–¥–æ—Ä–∞–∫—É–Ω”£
    time_btn = types.InlineKeyboardButton("‚è∞ –¢–∞“ì–∏—Ä–∏ –≤–∞“õ—Ç", callback_data="settime")
    post_btn = types.InlineKeyboardButton("üöÄ –ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–æ—Ä”£", callback_data="forcepost")
    keyboard.row(time_btn, post_btn)
    
    # –°–∞—Ñ–∏ —Å–µ—é–º - –¥–∏–≥–∞—Ä –∞–º–∞–ª“≥–æ
    remove_btn = types.InlineKeyboardButton("üóëÔ∏è –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω", callback_data="remove")
    refresh_btn = types.InlineKeyboardButton("üîÑ –ù–∞–≤—Å–æ–∑”£", callback_data="refresh")
    keyboard.row(remove_btn, refresh_btn)
    
    return keyboard

def create_remove_keyboard():
    """–≠“∑–æ–¥–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º“≥–æ"""
    if not bot_data.movie_queue:
        return None
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∞“≥–æ –±–∞—Ä–æ–∏ “≥–∞—Ä —Ñ–∏–ª–º
    for i, movie in enumerate(bot_data.movie_queue):
        caption = movie.get('caption', f'–§–∏–ª–º #{i+1}')
        if len(caption) > 25:
            caption = caption[:22] + "..."
        
        btn = types.InlineKeyboardButton(
            f"{i+1}. {caption}", 
            callback_data=f"remove_{i}"
        )
        keyboard.add(btn)
    
    # –ö–Ω–æ–ø–∫–∞–∏ –±–æ–∑–≥–∞—à—Ç
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_main")
    keyboard.add(back_btn)
    
    return keyboard

def create_time_keyboard():
    """–≠“∑–æ–¥–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∏–Ω—Ç–∏—Ö–æ–±–∏ –≤–∞“õ—Ç"""
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    
    # –í–∞“õ—Ç“≥–æ–∏ –ø–µ—à–Ω–∏“≥–æ–¥—à—É–¥–∞
    times = ["08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00", "22:00"]
    
    buttons = []
    for time_str in times:
        btn = types.InlineKeyboardButton(time_str, callback_data=f"settime_{time_str}")
        buttons.append(btn)
    
    # “∂—É—Ñ—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∫–Ω–æ–ø–∫–∞“≥–æ
    for i in range(0, len(buttons), 3):
        row = buttons[i:i+3]
        keyboard.row(*row)
    
    # –ö–Ω–æ–ø–∫–∞–∏ –±–æ–∑–≥–∞—à—Ç
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_main")
    keyboard.add(back_btn)
    
    return keyboard

def post_movie():
    """–ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º–∏ –Ω–∞–≤–±–∞—Ç”£ –¥–∞—Ä –∫–∞–Ω–∞–ª"""
    try:
        if not bot_data.movie_queue:
            logger.info("–ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç")
            return
        
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∏–ª–º–∏ –∞–≤–≤–∞–ª –∞–∑ –Ω–∞–≤–±–∞—Ç
        movie = bot_data.movie_queue.pop(0)
        
        # –ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º –¥–∞—Ä –∫–∞–Ω–∞–ª
        bot.send_video(
            chat_id=CHANNEL_ID,
            video=movie['file_id'],
            caption=movie.get('caption', ''),
            parse_mode='HTML'
        )
        
        # –ù–∞–≤—Å–æ–∑–∏–∏ —Ç–∞—ä—Ä–∏—Ö–∏ –æ—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä
        bot_data.last_post_date = get_tajikistan_time().strftime("%Y-%m-%d")
        
        # –ó–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
        save_data()
        
        logger.info(f"–§–∏–ª–º –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–Ω—Ç–∏—à–æ—Ä —à—É–¥: {movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}")
        
        # –û–≥–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            next_time, remaining_time = get_next_post_time()
            bot.send_message(
                ADMIN_USER_ID,
                f"‚úÖ –§–∏–ª–º –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–Ω—Ç–∏—à–æ—Ä —à—É–¥!\n\n"
                f"üìù –°–∞—Ä–ª–∞–≤“≥–∞: {movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}\n"
                f"‚è∞ –í–∞“õ—Ç: {get_tajikistan_time().strftime('%Y-%m-%d %H:%M')}\n"
                f"üìä –§–∏–ª–º“≥–æ–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}\n"
                f"üïê –ò–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time} –¥–∏–≥–∞—Ä",
                reply_markup=create_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –æ–≥–æ“≥–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {e}")
            
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º: {e}")
        try:
            bot.send_message(
                ADMIN_USER_ID,
                f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º: {str(e)}",
                reply_markup=create_main_keyboard()
            )
        except:
            pass

def setup_scheduler():
    """–¢–∞–Ω–∑–∏–º–∏ “∑–∞–¥–≤–∞–ª–∏ –∏–Ω—Ç–∏—à–æ—Ä"""
    schedule.clear()  # –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ “∑–∞–¥–≤–∞–ª–∏ “õ–∞–±–ª”£
    schedule.every().day.at(bot_data.post_time).do(post_movie)
    logger.info(f"“∂–∞–¥–≤–∞–ª–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞–Ω–∑–∏–º —à—É–¥ –±–∞—Ä–æ–∏ —Å–æ–∞—Ç–∏ {bot_data.post_time}")

def scheduler_thread():
    """Thread –±–∞—Ä–æ–∏ –∫–æ—Ä–∏ “∑–∞–¥–≤–∞–ª"""
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # –°–∞–Ω“∑–∏—à “≥–∞—Ä –¥–∞“õ–∏“õ–∞
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä scheduler thread: {e}")
            time.sleep(60)

# ==================== –§–ê–†–ú–û–ù“≤–û–ò –ë–û–¢ ====================

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /start –≤–∞ /help"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    next_time, remaining_time = get_next_post_time()
    
    help_text = f"""
üé¨ **–ë–æ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º“≥–æ**

**–í–∞–∑—ä–∏ –∫—É–Ω—É–Ω”£:**
üé≠ –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üïê –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}

**–î–∞—Å—Ç—É—Ä–∞–º–∞–ª:**
‚Ä¢ –ë–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º - —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥
‚Ä¢ –ë–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω”£ –∞–∑ –∫–Ω–æ–ø–∫–∞“≥–æ–∏ –∑–µ—Ä–∏–Ω –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥

**–•—É—Å—É—Å–∏—è—Ç“≥–æ:**
‚úÖ –ò–Ω—Ç–∏—à–æ—Ä–∏ —Ö—É–¥–∫–æ—Ä “≥–∞—Ä —Ä”Ø–∑
‚úÖ –ò–¥–æ—Ä–∞–∫—É–Ω”£ –±–æ –∫–Ω–æ–ø–∫–∞“≥–æ
‚úÖ –í–∞“õ—Ç–∏ –¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω
‚úÖ –ù–∏—à–æ–Ω–¥–æ–¥–∞–Ω–∏ –≤–∞“õ—Ç–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞
    """
    
    bot.reply_to(message, help_text, parse_mode='Markdown', reply_markup=create_main_keyboard())
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–∞—Ä–º–æ–Ω–∏ help-—Ä–æ –¥–∞—Ä—Ö–æ—Å—Ç –∫–∞—Ä–¥")

# ==================== –ö–û–†–ö–ê–†–î–ò CALLBACK-“≤–û ====================

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ “≥–∞–º–∞–∏ callback-“≥–æ"""
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –¥–∞—Å—Ç—Ä–∞—Å”£ –Ω–∞–¥–æ—Ä–µ–¥!")
        return
    
    try:
        if call.data == "status":
            handle_status_callback(call)
        elif call.data == "listmovies":
            handle_list_movies_callback(call)
        elif call.data == "settime":
            handle_settime_callback(call)
        elif call.data.startswith("settime_"):
            handle_settime_specific_callback(call)
        elif call.data == "forcepost":
            handle_forcepost_callback(call)
        elif call.data == "remove":
            handle_remove_callback(call)
        elif call.data.startswith("remove_"):
            handle_remove_specific_callback(call)
        elif call.data == "refresh":
            handle_refresh_callback(call)
        elif call.data == "back_to_main":
            handle_back_to_main_callback(call)
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä callback handler: {e}")
        bot.answer_callback_query(call.id, "‚ùå –•–∞—Ç–æ–≥”£ —Ä”Ø–π –¥–æ–¥!")

def handle_status_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ status"""
    queue_count = len(bot_data.movie_queue)
    next_movie = bot_data.movie_queue[0]['caption'] if bot_data.movie_queue else "“≤–µ“∑ —Ñ–∏–ª–º –¥–∞—Ä –Ω–∞–≤–±–∞—Ç –Ω–µ—Å—Ç"
    next_time, remaining_time = get_next_post_time()
    
    status_text = f"""
üìä **–í–∞–∑—ä–∏ –∫—É–Ω—É–Ω”£:**

üé¨ –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {queue_count}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üïê –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}
üé≠ –§–∏–ª–º–∏ –Ω–∞–≤–±–∞—Ç”£: {next_movie[:50]}{'...' if len(next_movie) > 50 else ''}
üìÖ –û—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.last_post_date if bot_data.last_post_date else '“≤–∞–Ω”Ø–∑ –∏–Ω—Ç–∏—à–æ—Ä –Ω–∞—à—É–¥–∞–∞—Å—Ç'}
üïí –í–∞“õ—Ç–∏ –∫—É–Ω—É–Ω”£: {get_tajikistan_time().strftime('%Y-%m-%d %H:%M')}
    """
    
    bot.edit_message_text(
        status_text, 
        call.message.chat.id, 
        call.message.message_id,
        parse_mode='Markdown',
        reply_markup=create_main_keyboard()
    )

def handle_list_movies_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ listmovies"""
    if not bot_data.movie_queue:
        bot.edit_message_text(
            "üìù **–ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç.**\n\n–ë–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º, —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        return
    
    movies_text = "üìù **–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç:**\n\n"
    for i, movie in enumerate(bot_data.movie_queue, 1):
        caption = movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')
        added_date = movie.get('added_date', '–ù–æ–º–∞—ä–ª—É–º')
        movies_text += f"{i}. {caption}\n   üìÖ {added_date}\n\n"
    
    # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –±–æ—Ä–∞–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£
    next_time, remaining_time = get_next_post_time()
    movies_text += f"üïê –ò–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time} –¥–∏–≥–∞—Ä"
    
    bot.edit_message_text(
        movies_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown',
        reply_markup=create_main_keyboard()
    )

def handle_settime_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ settime"""
    bot.edit_message_text(
        f"‚è∞ **–ò–Ω—Ç–∏—Ö–æ–±–∏ –≤–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä**\n\n–í–∞“õ—Ç–∏ –∫—É–Ω—É–Ω”£: {bot_data.post_time}\n\n–í–∞“õ—Ç–∏ –¥–∏–ª—Ö–æ“≥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown',
        reply_markup=create_time_keyboard()
    )

def handle_settime_specific_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ —Ç–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç–∏ –º—É—à–∞—Ö—Ö–∞—Å"""
    new_time = call.data.split("_")[1]
    
    try:
        # –°–∞–Ω“∑–∏—à–∏ —Ñ–æ—Ä–º–∞—Ç–∏ –≤–∞“õ—Ç
        time_parts = new_time.split(':')
        hour, minute = int(time_parts[0]), int(time_parts[1])
        
        if not (0 <= hour <= 23) or not (0 <= minute <= 59):
            raise ValueError("–í–∞“õ—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç")
        
        # –¢–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç–∏ –Ω–∞–≤
        bot_data.post_time = new_time
        setup_scheduler()
        save_data()
        
        next_time, remaining_time = get_next_post_time()
        
        bot.edit_message_text(
            f"‚úÖ **–í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞“ì–∏—Ä –¥–æ–¥–∞ —à—É–¥!**\n\n"
            f"üïê –í–∞“õ—Ç–∏ –Ω–∞–≤: {new_time}\n"
            f"‚è∞ –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        
        logger.info(f"–í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞“ì–∏—Ä –¥–æ–¥–∞ —à—É–¥ –±–∞: {new_time}")
        
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå **–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ç–∞“ì–∏—Ä–∏ –≤–∞“õ—Ç**\n\n{str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )

def handle_forcepost_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ forcepost"""
    if not bot_data.movie_queue:
        bot.edit_message_text(
            "‚ùå **–ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç**\n\n–ë–∞—Ä–æ–∏ –∏–Ω—Ç–∏—à–æ—Ä —è–≥–æ–Ω —Ñ–∏–ª–º –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        return
    
    bot.edit_message_text(
        f"‚è≥ **–ò–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º...**\n\n–§–∏–ª–º: {bot_data.movie_queue[0].get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown'
    )
    
    post_movie()
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–æ—Ä”£ –¥–∞—Ä—Ö–æ—Å—Ç –∫–∞—Ä–¥")

def handle_remove_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ remove"""
    if not bot_data.movie_queue:
        bot.edit_message_text(
            "üìù **–ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç**\n\n“≤–µ“∑ —Ñ–∏–ª–º –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        return
    
    bot.edit_message_text(
        "üóëÔ∏è **–ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∏–ª–º –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω**\n\n–§–∏–ª–º–∏ –¥–∏–ª—Ö–æ“≥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown',
        reply_markup=create_remove_keyboard()
    )

def handle_remove_specific_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º–∏ –º—É—à–∞—Ö—Ö–∞—Å"""
    try:
        movie_index = int(call.data.split("_")[1])
        
        if movie_index < 0 or movie_index >= len(bot_data.movie_queue):
            bot.edit_message_text(
                "‚ùå **–§–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥**\n\n–§–∏–ª–º–∏ –∏–Ω—Ç–∏—Ö–æ–±—à—É–¥–∞ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç.",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
            return
        
        removed_movie = bot_data.movie_queue.pop(movie_index)
        save_data()
        
        bot.edit_message_text(
            f"‚úÖ **–§–∏–ª–º –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥**\n\n"
            f"üìù {removed_movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}\n\n"
            f"üìä –§–∏–ª–º“≥–æ–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞: {len(bot_data.movie_queue)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        
        logger.info(f"–§–∏–ª–º –∞–∑ –Ω–∞–≤–±–∞—Ç –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥: {removed_movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')}")
        
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå **–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω**\n\n{str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )

def handle_refresh_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ refresh"""
    next_time, remaining_time = get_next_post_time()
    
    refresh_text = f"""
üîÑ **–ú–∞—ä–ª—É–º–æ—Ç –Ω–∞–≤—Å–æ–∑”£ —à—É–¥**

üìä –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üïê –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}
üïí –í–∞“õ—Ç–∏ –∫—É–Ω—É–Ω”£: {get_tajikistan_time().strftime('%Y-%m-%d %H:%M')}

–ë–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω”£ –∞–∑ –∫–Ω–æ–ø–∫–∞“≥–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.
    """
    
    bot.edit_message_text(
        refresh_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown',
        reply_markup=create_main_keyboard()
    )

def handle_back_to_main_callback(call):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ callback-–∏ –±–æ–∑–≥–∞—à—Ç –±–∞ –º–µ–Ω—é"""
    next_time, remaining_time = get_next_post_time()
    
    main_text = f"""
üé¨ **–ë–æ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä–∏ —Ñ–∏–ª–º“≥–æ**

üìä –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üïê –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}

–ë–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω”£ –∞–∑ –∫–Ω–æ–ø–∫–∞“≥–æ–∏ –∑–µ—Ä –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥:
    """
    
    bot.edit_message_text(
        main_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown',
        reply_markup=create_main_keyboard()
    )

# ==================== –ö–û–†–ö–ê–†–î–ò –§–ê–ô–õ“≤–û–ò –í–ò–î–ï–û”¢ ====================

@bot.message_handler(content_types=['video'])
def handle_video(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ñ–∞–π–ª“≥–æ–∏ –≤–∏–¥–µ–æ”£"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    try:
        # –°–∞–Ω“∑–∏—à–∏ “∑–æ–∏ —Ö–æ–ª”£ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç
        if len(bot_data.movie_queue) >= MAX_QUEUE_SIZE:
            bot.reply_to(
                message, 
                f"‚ùå **–ù–∞–≤–±–∞—Ç –ø—É—Ä –∞—Å—Ç!**\n\n"
                f"“≤–∞–¥–¥–∏ –∞–∫—Å–∞—Ä: {MAX_QUEUE_SIZE} —Ñ–∏–ª–º\n"
                f"–õ—É—Ç—Ñ–∞–Ω —è–∫—á–∞–Ω–¥ —Ñ–∏–ª–º—Ä–æ –Ω–µ—Å—Ç –∫—É–Ω–µ–¥.",
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
            return
        
        # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º –±–∞ –Ω–∞–≤–±–∞—Ç
        movie_data = {
            'file_id': message.video.file_id,
            'caption': message.caption or '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞',
            'file_name': message.video.file_name or 'video.mp4',
            'file_size': message.video.file_size,
            'duration': message.video.duration,
            'added_date': get_tajikistan_time().strftime('%Y-%m-%d %H:%M'),
            'added_by': message.from_user.id
        }
        
        bot_data.movie_queue.append(movie_data)
        save_data()
        
        # –ü–∞–π—ë–º–∏ —Ç–∞—Å–¥–∏“õ
        next_time, remaining_time = get_next_post_time()
        
        confirmation_text = f"""
‚úÖ **–§–∏–ª–º –±–∞ –Ω–∞–≤–±–∞—Ç –∏–ª–æ–≤–∞ —à—É–¥!**

üìù –°–∞—Ä–ª–∞–≤“≥–∞: {movie_data['caption']}
üìÅ –§–∞–π–ª: {movie_data['file_name']}
üìä –ú–∞“õ–æ–º–∏ –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}/{MAX_QUEUE_SIZE}
üìÖ –°–∞–Ω–∞–∏ –∏–ª–æ–≤–∞: {movie_data['added_date']}

‚è∞ –ò–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time} –¥–∏–≥–∞—Ä
        """
        
        bot.reply_to(
            message, 
            confirmation_text,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        
        logger.info(f"–§–∏–ª–º–∏ –Ω–∞–≤ –∏–ª–æ–≤–∞ —à—É–¥: {movie_data['caption']}")
        
    except Exception as e:
        error_text = f"‚ùå **–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º**\n\n{str(e)}"
        bot.reply_to(message, error_text, parse_mode='Markdown')
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º: {e}")

# ==================== –ö–û–†–ö–ê–†–î–ò –î–ò–ì–ê–† –ù–ê–í–™“≤–û–ò –ü–ê–Å–ú“≤–û ====================

@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ “≥—É“∑“∑–∞—Ç“≥–æ"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    # –°–∞–Ω“∑–∏—à –æ—ë “≥—É“∑“∑–∞—Ç –≤–∏–¥–µ–æ –∞—Å—Ç
    if message.document.mime_type and message.document.mime_type.startswith('video/'):
        try:
            # –°–∞–Ω“∑–∏—à–∏ “∑–æ–∏ —Ö–æ–ª”£ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç
            if len(bot_data.movie_queue) >= MAX_QUEUE_SIZE:
                bot.reply_to(
                    message, 
                    f"‚ùå **–ù–∞–≤–±–∞—Ç –ø—É—Ä –∞—Å—Ç!**\n\n"
                    f"“≤–∞–¥–¥–∏ –∞–∫—Å–∞—Ä: {MAX_QUEUE_SIZE} —Ñ–∏–ª–º\n"
                    f"–õ—É—Ç—Ñ–∞–Ω —è–∫—á–∞–Ω–¥ —Ñ–∏–ª–º—Ä–æ –Ω–µ—Å—Ç –∫—É–Ω–µ–¥.",
                    parse_mode='Markdown',
                    reply_markup=create_main_keyboard()
                )
                return
            
            # –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –≤–∏–¥–µ–æ-“≥—É“∑“∑–∞—Ç –±–∞ –Ω–∞–≤–±–∞—Ç
            movie_data = {
                'file_id': message.document.file_id,
                'caption': message.caption or message.document.file_name or '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞',
                'file_name': message.document.file_name or 'video.mp4',
                'file_size': message.document.file_size,
                'duration': 0,  # –ë–∞—Ä–æ–∏ “≥—É“∑“∑–∞—Ç“≥–æ –¥–∞–≤–æ–º–Ω–æ–∫”£ –¥–∞—Å—Ç—Ä–∞—Å –Ω–µ—Å—Ç
                'added_date': get_tajikistan_time().strftime('%Y-%m-%d %H:%M'),
                'added_by': message.from_user.id,
                'type': 'document'
            }
            
            bot_data.movie_queue.append(movie_data)
            save_data()
            
            # –ü–∞–π—ë–º–∏ —Ç–∞—Å–¥–∏“õ
            next_time, remaining_time = get_next_post_time()
            
            confirmation_text = f"""
‚úÖ **–í–∏–¥–µ–æ-“≥—É“∑“∑–∞—Ç –±–∞ –Ω–∞–≤–±–∞—Ç –∏–ª–æ–≤–∞ —à—É–¥!**

üìù –°–∞—Ä–ª–∞–≤“≥–∞: {movie_data['caption']}
üìÅ –§–∞–π–ª: {movie_data['file_name']}
üìä –ú–∞“õ–æ–º–∏ –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}/{MAX_QUEUE_SIZE}
üìÖ –°–∞–Ω–∞–∏ –∏–ª–æ–≤–∞: {movie_data['added_date']}

‚è∞ –ò–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time} –¥–∏–≥–∞—Ä
            """
            
            bot.reply_to(
                message, 
                confirmation_text,
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
            
            logger.info(f"–í–∏–¥–µ–æ-“≥—É“∑“∑–∞—Ç –∏–ª–æ–≤–∞ —à—É–¥: {movie_data['caption']}")
            
        except Exception as e:
            error_text = f"‚ùå **–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ “≥—É“∑“∑–∞—Ç**\n\n{str(e)}"
            bot.reply_to(message, error_text, parse_mode='Markdown')
            logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ “≥—É“∑“∑–∞—Ç: {e}")
    else:
        bot.reply_to(
            message, 
            "‚ùå **–ù–∞–≤—ä–∏ —Ñ–∞–π–ª–∏ –¥–∞—Å—Ç–≥–∏—Ä–∏–Ω–∞—à—É–¥–∞**\n\n"
            "–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ñ–∞–π–ª“≥–æ–∏ –≤–∏–¥–µ–æ–∏—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥.",
            parse_mode='Markdown'
        )

@bot.message_handler(content_types=['photo', 'audio', 'voice', 'animation', 'sticker'])
def handle_unsupported_media(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª“≥–æ–∏ –¥–∞—Å—Ç–≥–∏—Ä–∏–Ω–∞—à—É–¥–∞"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    media_types = {
        'photo': '–∞–∫—Å',
        'audio': '–∞—É–¥–∏–æ',
        'voice': '–æ–≤–æ–∑”£ –ø–∞—ë–º',
        'animation': 'GIF',
        'sticker': '—Å—Ç–∏–∫–µ—Ä'
    }
    
    media_type = media_types.get(message.content_type, '–º–µ–¥–∏–∞—Ñ–∞–π–ª')
    
    bot.reply_to(
        message,
        f"‚ùå **–ù–∞–≤—ä–∏ —Ñ–∞–π–ª–∏ –¥–∞—Å—Ç–≥–∏—Ä–∏–Ω–∞—à—É–¥–∞**\n\n"
        f"–®—É–º–æ {media_type} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–µ–¥.\n"
        f"–ò–Ω –±–æ—Ç —Ç–∞–Ω“≥–æ —Ñ–∞–π–ª“≥–æ–∏ –≤–∏–¥–µ–æ–∏—Ä–æ “õ–∞–±—É–ª –º–µ–∫—É–Ω–∞–¥.\n\n"
        f"–õ—É—Ç—Ñ–∞–Ω —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥.",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ –ø–∞—ë–º“≥–æ–∏ –º–∞—Ç–Ω”£"""
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –®—É–º–æ “≥—É“õ—É“õ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω –±–æ—Ç—Ä–æ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    
    # –°–∞–Ω“∑–∏—à–∏ —Ñ–∞—Ä–º–æ–Ω“≥–æ–∏ –º–∞—Ö—Ñ”£
    text = message.text.lower().strip()
    
    if text in ['/status', '—Å—Ç–∞—Ç—É—Å', '–≤–∞–∑—ä–∏—è—Ç']:
        # –ù–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ –≤–∞–∑—ä–∏—è—Ç–∏ –º—É—Ñ–∞—Å—Å–∞–ª
        queue_count = len(bot_data.movie_queue)
        next_time, remaining_time = get_next_post_time()
        
        status_text = f"""
üìä **–í–∞–∑—ä–∏ –º—É—Ñ–∞—Å—Å–∞–ª:**

üé¨ –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {queue_count}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üïê –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}
üìÖ –û—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.last_post_date if bot_data.last_post_date else '“≤–∞–Ω”Ø–∑ –∏–Ω—Ç–∏—à–æ—Ä –Ω–∞—à—É–¥–∞–∞—Å—Ç'}
üïí –í–∞“õ—Ç–∏ –∫—É–Ω—É–Ω”£: {get_tajikistan_time().strftime('%Y-%m-%d %H:%M')}
üÜî –ö–∞–Ω–∞–ª: {CHANNEL_ID}

**–§–∏–ª–º“≥–æ–∏ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç:**
        """
        
        if bot_data.movie_queue:
            for i, movie in enumerate(bot_data.movie_queue[:5], 1):  # –¢–∞–Ω“≥–æ 5-—Ç–æ–∏ –∞–≤–≤–∞–ª
                status_text += f"\n{i}. {movie.get('caption', '–ë–µ —Å–∞—Ä–ª–∞–≤“≥–∞')[:30]}..."
            
            if len(bot_data.movie_queue) > 5:
                status_text += f"\n... –≤–∞ {len(bot_data.movie_queue) - 5} —Ñ–∏–ª–º–∏ –¥–∏–≥–∞—Ä"
        else:
            status_text += "\n“≤–µ“∑ —Ñ–∏–ª–º –¥–∞—Ä –Ω–∞–≤–±–∞—Ç –Ω–µ—Å—Ç"
        
        bot.reply_to(message, status_text, parse_mode='Markdown', reply_markup=create_main_keyboard())
        
    elif text in ['/clear', '–ø–æ–∫ –∫–∞—Ä–¥–∞–Ω', '–æ—á–∏—Å—Ç–∏—Ç—å']:
        # –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ –Ω–∞–≤–±–∞—Ç (–±–æ —Ç–∞—Å–¥–∏“õ)
        if bot_data.movie_queue:
            bot.reply_to(
                message,
                f"‚ö†Ô∏è **–û–≥–æ“≥”£!**\n\n"
                f"–®—É–º–æ –º–µ—Ö–æ“≥–µ–¥ {len(bot_data.movie_queue)} —Ñ–∏–ª–º—Ä–æ –∞–∑ –Ω–∞–≤–±–∞—Ç –Ω–µ—Å—Ç –∫—É–Ω–µ–¥?\n"
                f"–ë–∞—Ä–æ–∏ —Ç–∞—Å–¥–∏“õ '/clearconfirm' –Ω–∞–≤–∏—Å–µ–¥.",
                parse_mode='Markdown'
            )
        else:
            bot.reply_to(message, "üìù –ù–∞–≤–±–∞—Ç –∞–ª–ª–∞–∫–∞–π —Ö–æ–ª”£ –∞—Å—Ç.", reply_markup=create_main_keyboard())
    
    elif text in ['/clearconfirm', '—Ç–∞—Å–¥–∏“õ']:
        # –¢–∞—Å–¥–∏“õ–∏ –ø–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ –Ω–∞–≤–±–∞—Ç
        cleared_count = len(bot_data.movie_queue)
        bot_data.movie_queue.clear()
        save_data()
        
        bot.reply_to(
            message,
            f"‚úÖ **–ù–∞–≤–±–∞—Ç –ø–æ–∫ –∫–∞—Ä–¥–∞ —à—É–¥!**\n\n"
            f"üóëÔ∏è {cleared_count} —Ñ–∏–ª–º –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.",
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        logger.info(f"–ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ –ø–æ–∫ –∫–∞—Ä–¥–∞ —à—É–¥: {cleared_count} —Ñ–∏–ª–º")
    
    elif text.startswith('/settime '):
        # –¢–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç –±–æ —Ñ–∞—Ä–º–æ–Ω
        try:
            new_time = text.split(' ', 1)[1].strip()
            
            # –°–∞–Ω“∑–∏—à–∏ —Ñ–æ—Ä–º–∞—Ç–∏ –≤–∞“õ—Ç
            time_parts = new_time.split(':')
            if len(time_parts) != 2:
                raise ValueError("–§–æ—Ä–º–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç")
            
            hour, minute = int(time_parts[0]), int(time_parts[1])
            
            if not (0 <= hour <= 23) or not (0 <= minute <= 59):
                raise ValueError("–í–∞“õ—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç")
            
            # –¢–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç–∏ –Ω–∞–≤
            bot_data.post_time = new_time
            setup_scheduler()
            save_data()
            
            next_time, remaining_time = get_next_post_time()
            
            bot.reply_to(
                message,
                f"‚úÖ **–í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞“ì–∏—Ä –¥–æ–¥–∞ —à—É–¥!**\n\n"
                f"üïê –í–∞“õ—Ç–∏ –Ω–∞–≤: {new_time}\n"
                f"‚è∞ –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}",
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
            
            logger.info(f"–í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä —Ç–∞“ì–∏—Ä –¥–æ–¥–∞ —à—É–¥ –±–∞: {new_time}")
            
        except (IndexError, ValueError) as e:
            bot.reply_to(
                message,
                "‚ùå **–§–æ—Ä–º–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç!**\n\n"
                "–ò—Å—Ç–∏—Ñ–æ–¥–∞: `/settime 14:30`\n"
                "–ú–∏—Å–æ–ª: `/settime 20:00`",
                parse_mode='Markdown'
            )
    
    elif text in ['/backup', '–∑–∞—Ö–∏—Ä–∞', '–±—ç–∫–∞–ø']:
        # –≠“∑–æ–¥–∏ –Ω—É—Å—Ö–∞–∏ –∑–∞—Ö–∏—Ä–∞–≤”£
        try:
            backup_data = {
                'backup_date': get_tajikistan_time().strftime('%Y-%m-%d %H:%M:%S'),
                'version': '1.0',
                'data': bot_data.to_dict()
            }
            
            backup_text = json.dumps(backup_data, ensure_ascii=False, indent=2)
            
            # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –±–µ–∫–∞–ø “≥–∞–º—á—É–Ω —Ñ–∞–π–ª
            bot.send_document(
                message.chat.id,
                telebot.types.InputFile.from_string(
                    backup_text.encode('utf-8'),
                    f"bot_backup_{get_tajikistan_time().strftime('%Y%m%d_%H%M%S')}.json"
                ),
                caption=f"üíæ **–ù—É—Å—Ö–∞–∏ –∑–∞—Ö–∏—Ä–∞–≤”£**\n\n"
                        f"üìÖ –°–∞–Ω–∞–∏ —ç“∑–æ–¥: {backup_data['backup_date']}\n"
                        f"üìä –§–∏–ª–º“≥–æ: {len(bot_data.movie_queue)}",
                parse_mode='Markdown'
            )
            
            logger.info("–ù—É—Å—Ö–∞–∏ –∑–∞—Ö–∏—Ä–∞–≤”£ —ç“∑–æ–¥ –∫–∞—Ä–¥–∞ —à—É–¥")
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —ç“∑–æ–¥–∏ –±–µ–∫–∞–ø: {str(e)}")
    
    else:
        # –ü–∞–π—ë–º–∏ —É–º—É–º”£ –±–∞—Ä–æ–∏ –ø–∞—ë–º“≥–æ–∏ –Ω–æ–º–∞—ä–ª—É–º
        bot.reply_to(
            message,
            "‚ÑπÔ∏è **–î–∞—Å—Ç—É—Ä–∞–º–∞–ª:**\n\n"
            "‚Ä¢ –ë–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º - —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥\n"
            "‚Ä¢ –ë–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω”£ - –∞–∑ –∫–Ω–æ–ø–∫–∞“≥–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥\n"
            "‚Ä¢ –ë–∞—Ä–æ–∏ –∫”Ø–º–∞–∫ - `/help` –Ω–∞–≤–∏—Å–µ–¥\n\n"
            "**–§–∞—Ä–º–æ–Ω“≥–æ–∏ –∏–ª–æ–≤–∞–≥”£:**\n"
            "‚Ä¢ `/status` - –≤–∞–∑—ä–∏—è—Ç–∏ –º—É—Ñ–∞—Å—Å–∞–ª\n"
            "‚Ä¢ `/settime 14:30` - —Ç–∞–Ω–∑–∏–º–∏ –≤–∞“õ—Ç\n"
            "‚Ä¢ `/clear` - –ø–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ –Ω–∞–≤–±–∞—Ç\n"
            "‚Ä¢ `/backup` - —ç“∑–æ–¥–∏ –Ω—É—Å—Ö–∞–∏ –∑–∞—Ö–∏—Ä–∞–≤”£",
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )

# ==================== –ö–û–†–ö–ê–†–î–ò –•–ê–¢–û–ì–ò“≤–û ====================

def error_handler(func):
    """Decorator –±–∞—Ä–æ–∏ –∫–æ—Ä–∫–∞—Ä–¥–∏ —Ö–∞—Ç–æ–≥–∏“≥–æ"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä {func.__name__}: {e}")
            try:
                if args and hasattr(args[0], 'message'):
                    bot.send_message(
                        ADMIN_USER_ID,
                        f"‚ùå **–•–∞—Ç–æ–≥–∏–∏ —Å–∏—Å—Ç–µ–º–∞–≤”£**\n\n"
                        f"–§—É–Ω–∫—Ü–∏—è: {func.__name__}\n"
                        f"–•–∞—Ç–æ–≥”£: {str(e)}\n"
                        f"–í–∞“õ—Ç: {get_tajikistan_time().strftime('%Y-%m-%d %H:%M:%S')}",
                        parse_mode='Markdown'
                    )
            except:
                pass
    return wrapper

# ==================== –§–£–ù–ö–°–ò–Ø“≤–û–ò –•–ò–ó–ú–ê–¢–†–ê–°–û–ù”¢ ====================

def check_bot_health():
    """–°–∞–Ω“∑–∏—à–∏ —Å–∞–ª–æ–º–∞—Ç–∏–∏ –±–æ—Ç"""
    try:
        bot_info = bot.get_me()
        logger.info(f"–ë–æ—Ç –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥: @{bot_info.username}")
        
        # –°–∞–Ω“∑–∏—à–∏ –¥–∞—Å—Ç—Ä–∞—Å–∏–∏ –∫–∞–Ω–∞–ª
        try:
            channel_info = bot.get_chat(CHANNEL_ID)
            logger.info(f"–ö–∞–Ω–∞–ª –¥–∞—Å—Ç—Ä–∞—Å –∞—Å—Ç: {channel_info.title}")
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –∫–∞–Ω–∞–ª: {e}")
            bot.send_message(
                ADMIN_USER_ID,
                f"‚ö†Ô∏è **–û–≥–æ“≥”£!**\n\n"
                f"–ë–æ—Ç –±–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID} –¥–∞—Å—Ç—Ä–∞—Å”£ –Ω–∞–¥–æ—Ä–∞–¥.\n"
                f"–•–∞—Ç–æ–≥”£: {str(e)}",
                parse_mode='Markdown'
            )
        
        return True
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä —Å–∞–Ω“∑–∏—à–∏ —Å–∞–ª–æ–º–∞—Ç–∏–∏ –±–æ—Ç: {e}")
        return False

def send_daily_report():
    """–§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ “≥–∏—Å–æ–±–æ—Ç–∏ —Ä”Ø–∑–æ–Ω–∞"""
    try:
        today = get_tajikistan_time().strftime('%Y-%m-%d')
        
        report_text = f"""
üìã **“≤–∏—Å–æ–±–æ—Ç–∏ —Ä”Ø–∑–æ–Ω–∞ - {today}**

üìä **–û–º–æ—Ä:**
üé¨ –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üìÖ –û—Ö–∏—Ä–∏–Ω –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.last_post_date if bot_data.last_post_date else '“≤–∞–Ω”Ø–∑ –∏–Ω—Ç–∏—à–æ—Ä –Ω–∞—à—É–¥–∞–∞—Å—Ç'}

üìà **–í–∞–∑—ä–∏—è—Ç:**
{'‚úÖ “≤–∞–º–∞ —á–∏–∑ —Ö—É–± –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥' if bot_data.movie_queue else '‚ö†Ô∏è –ù–∞–≤–±–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ —Ö–æ–ª”£ –∞—Å—Ç'}

‚è∞ “≤–∏—Å–æ–±–æ—Ç –∞–∑: {get_tajikistan_time().strftime('%H:%M')}
        """
        
        bot.send_message(
            ADMIN_USER_ID,
            report_text,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
        
        logger.info("“≤–∏—Å–æ–±–æ—Ç–∏ —Ä”Ø–∑–æ–Ω–∞ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥")
        
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ “≥–∏—Å–æ–±–æ—Ç: {e}")

def setup_daily_report():
    """–¢–∞–Ω–∑–∏–º–∏ “≥–∏—Å–æ–±–æ—Ç–∏ —Ä”Ø–∑–æ–Ω–∞"""
    schedule.every().day.at("09:00").do(send_daily_report)
    logger.info("“≤–∏—Å–æ–±–æ—Ç–∏ —Ä”Ø–∑–æ–Ω–∞ —Ç–∞–Ω–∑–∏–º —à—É–¥ –±–∞—Ä–æ–∏ —Å–æ–∞—Ç–∏ 09:00")

# ==================== –§–£–ù–ö–°–ò–Ø–ò –ê–°–û–°”¢ ====================

def main():
    """–§—É–Ω–∫—Å–∏—è–∏ –∞—Å–æ—Å–∏–∏ –±–æ—Ç"""
    try:
        logger.info("–ë–æ—Ç –æ“ì–æ–∑ —ë—Ñ—Ç...")
        
        # –ë–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç
        load_data()
        
        # –¢–∞–Ω–∑–∏–º–∏ “∑–∞–¥–≤–∞–ª
        setup_scheduler()
        setup_daily_report()
        
        # –°–∞–Ω“∑–∏—à–∏ —Å–∞–ª–æ–º–∞—Ç–∏–∏ –±–æ—Ç
        if not check_bot_health():
            logger.error("–•–∞—Ç–æ–≥”£ –¥–∞—Ä —Å–∞–Ω“∑–∏—à–∏ —Å–∞–ª–æ–º–∞—Ç–∏–∏ –±–æ—Ç")
            return
        
        # –û“ì–æ–∑–∏ thread –±–∞—Ä–æ–∏ “∑–∞–¥–≤–∞–ª
        scheduler_thread_obj = threading.Thread(target=scheduler_thread, daemon=True)
        scheduler_thread_obj.start()
        logger.info("Thread-–∏ “∑–∞–¥–≤–∞–ª –æ“ì–æ–∑ —ë—Ñ—Ç")
        
        # –ü–∞–π—ë–º–∏ –æ“ì–æ–∑–∏ –∫–æ—Ä –±–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            next_time, remaining_time = get_next_post_time()
            start_message = f"""
üöÄ **–ë–æ—Ç –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –æ“ì–æ–∑ —ë—Ñ—Ç!**

üìä **–í–∞–∑—ä–∏—è—Ç–∏ –∫—É–Ω—É–Ω”£:**
üé¨ –§–∏–ª–º“≥–æ –¥–∞—Ä –Ω–∞–≤–±–∞—Ç: {len(bot_data.movie_queue)}/{MAX_QUEUE_SIZE}
‚è∞ –í–∞“õ—Ç–∏ –∏–Ω—Ç–∏—à–æ—Ä: {bot_data.post_time}
üïê –¢–æ –∏–Ω—Ç–∏—à–æ—Ä–∏ –Ω–∞–≤–±–∞—Ç”£: {remaining_time}
üïí –í–∞“õ—Ç–∏ –æ“ì–æ–∑: {get_tajikistan_time().strftime('%Y-%m-%d %H:%M:%S')}

‚úÖ “≤–∞–º–∞ —Å–∏—Å—Ç–µ–º–∞“≥–æ –æ–º–æ–¥–∞
            """
            
            bot.send_message(
                ADMIN_USER_ID,
                start_message,
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞–π—ë–º–∏ –æ“ì–æ–∑: {e}")
        
        logger.info("–ë–æ—Ç –æ–º–æ–¥–∞ –±–∞ –∫–æ—Ä. –ò–Ω—Ç–∏–∑–æ—Ä–∏ –ø–∞—ë–º“≥–æ...")
        
        # –û“ì–æ–∑–∏ polling
        bot.infinity_polling(
            timeout=20,
            long_polling_timeout=20,
            none_stop=True,
            interval=1
        )
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∞–∑ “∑–æ–Ω–∏–±–∏ –∫–æ—Ä–±–∞—Ä “õ–∞—Ç—ä –∫–∞—Ä–¥–∞ —à—É–¥")
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ “∑–∏–¥–¥”£ –¥–∞—Ä –∫–æ—Ä–∏ –±–æ—Ç: {e}")
        try:
            bot.send_message(
                ADMIN_USER_ID,
                f"‚ùå **–•–∞—Ç–æ–≥–∏–∏ “∑–∏–¥–¥”£!**\n\n"
                f"–ë–æ—Ç “õ–∞—Ç—ä —à—É–¥: {str(e)}\n"
                f"–í–∞“õ—Ç: {get_tajikistan_time().strftime('%Y-%m-%d %H:%M:%S')}",
                parse_mode='Markdown'
            )
        except:
            pass
        raise
    finally:
        logger.info("–ë–æ—Ç —Ö–æ–º”Ø—à —à—É–¥")

# ==================== –ù–£“ö–¢–ê–ò –í–û–†–ò–î–®–ê–í”¢ ====================

if __name__ == "__main__":
    main()